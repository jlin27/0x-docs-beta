import * as React from 'react';
import { createContext, useState, useEffect, useContext } from 'react';
import posthogJs from 'posthog-js';

var PostHogContext = createContext({ client: undefined });

function PostHogProvider(_a) {
    var children = _a.children, client = _a.client, apiKey = _a.apiKey, options = _a.options;
    var _b = useState(client), posthog = _b[0], setPosthog = _b[1];
    useEffect(function () {
        if (client && apiKey) {
            console.warn('You have provided both a client and an apiKey to PostHogProvider. The apiKey will be ignored in favour of the client.');
        }
        if (client && options) {
            console.warn('You have provided both a client and options to PostHogProvider. The options will be ignored in favour of the client.');
        }
        if (posthog) {
            return;
        }
        if (client) {
            setPosthog(client);
        }
        else if (apiKey) {
            posthogJs.init(apiKey, options);
            setPosthog(posthogJs);
        }
    }, [posthog, client, apiKey, options]);
    return React.createElement(PostHogContext.Provider, { value: { client: posthog } }, children);
}

var usePostHog = function () {
    var client = useContext(PostHogContext).client;
    return client;
};

function useFeatureFlagEnabled(flag) {
    var client = usePostHog();
    var _a = useState(), featureEnabled = _a[0], setFeatureEnabled = _a[1];
    useEffect(function () {
        if (!client) {
            return;
        }
        return client.onFeatureFlags(function () {
            setFeatureEnabled(client.isFeatureEnabled(flag));
        });
    }, [client, flag]);
    return featureEnabled;
}

function useFeatureFlagPayload(flag) {
    var client = usePostHog();
    var _a = useState(), featureFlagPayload = _a[0], setFeatureFlagPayload = _a[1];
    useEffect(function () {
        if (!client) {
            return;
        }
        return client.onFeatureFlags(function () {
            setFeatureFlagPayload(client.getFeatureFlagPayload(flag));
        });
    }, [client, flag]);
    return featureFlagPayload;
}

function useActiveFeatureFlags(flag) {
    var client = usePostHog();
    var _a = useState(), featureFlags = _a[0], setFeatureFlags = _a[1];
    useEffect(function () {
        if (!client) {
            return;
        }
        return client.onFeatureFlags(function (flags) {
            setFeatureFlags(flags);
        });
    }, [client, flag]);
    return featureFlags;
}

function useFeatureFlagVariantKey(flag) {
    var client = usePostHog();
    var _a = useState(), featureFlagVariantKey = _a[0], setFeatureFlagVariantKey = _a[1];
    useEffect(function () {
        if (!client) {
            return;
        }
        return client.onFeatureFlags(function () {
            setFeatureFlagVariantKey(client.getFeatureFlag(flag));
        });
    }, [client, flag]);
    return featureFlagVariantKey;
}

export { PostHogContext, PostHogProvider, useActiveFeatureFlags, useFeatureFlagEnabled, useFeatureFlagPayload, useFeatureFlagVariantKey, usePostHog };
