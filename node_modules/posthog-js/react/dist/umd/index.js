(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('posthog-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react', 'posthog-js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.PosthogReact = {}, global.React, global.posthogJs));
}(this, (function (exports, React, posthogJs) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var React__namespace = /*#__PURE__*/_interopNamespace(React);
    var posthogJs__default = /*#__PURE__*/_interopDefaultLegacy(posthogJs);

    var PostHogContext = React.createContext({ client: undefined });

    function PostHogProvider(_a) {
        var children = _a.children, client = _a.client, apiKey = _a.apiKey, options = _a.options;
        var _b = React.useState(client), posthog = _b[0], setPosthog = _b[1];
        React.useEffect(function () {
            if (client && apiKey) {
                console.warn('You have provided both a client and an apiKey to PostHogProvider. The apiKey will be ignored in favour of the client.');
            }
            if (client && options) {
                console.warn('You have provided both a client and options to PostHogProvider. The options will be ignored in favour of the client.');
            }
            if (posthog) {
                return;
            }
            if (client) {
                setPosthog(client);
            }
            else if (apiKey) {
                posthogJs__default['default'].init(apiKey, options);
                setPosthog(posthogJs__default['default']);
            }
        }, [posthog, client, apiKey, options]);
        return React__namespace.createElement(PostHogContext.Provider, { value: { client: posthog } }, children);
    }

    var usePostHog = function () {
        var client = React.useContext(PostHogContext).client;
        return client;
    };

    function useFeatureFlagEnabled(flag) {
        var client = usePostHog();
        var _a = React.useState(), featureEnabled = _a[0], setFeatureEnabled = _a[1];
        React.useEffect(function () {
            if (!client) {
                return;
            }
            return client.onFeatureFlags(function () {
                setFeatureEnabled(client.isFeatureEnabled(flag));
            });
        }, [client, flag]);
        return featureEnabled;
    }

    function useFeatureFlagPayload(flag) {
        var client = usePostHog();
        var _a = React.useState(), featureFlagPayload = _a[0], setFeatureFlagPayload = _a[1];
        React.useEffect(function () {
            if (!client) {
                return;
            }
            return client.onFeatureFlags(function () {
                setFeatureFlagPayload(client.getFeatureFlagPayload(flag));
            });
        }, [client, flag]);
        return featureFlagPayload;
    }

    function useActiveFeatureFlags(flag) {
        var client = usePostHog();
        var _a = React.useState(), featureFlags = _a[0], setFeatureFlags = _a[1];
        React.useEffect(function () {
            if (!client) {
                return;
            }
            return client.onFeatureFlags(function (flags) {
                setFeatureFlags(flags);
            });
        }, [client, flag]);
        return featureFlags;
    }

    function useFeatureFlagVariantKey(flag) {
        var client = usePostHog();
        var _a = React.useState(), featureFlagVariantKey = _a[0], setFeatureFlagVariantKey = _a[1];
        React.useEffect(function () {
            if (!client) {
                return;
            }
            return client.onFeatureFlags(function () {
                setFeatureFlagVariantKey(client.getFeatureFlag(flag));
            });
        }, [client, flag]);
        return featureFlagVariantKey;
    }

    exports.PostHogContext = PostHogContext;
    exports.PostHogProvider = PostHogProvider;
    exports.useActiveFeatureFlags = useActiveFeatureFlags;
    exports.useFeatureFlagEnabled = useFeatureFlagEnabled;
    exports.useFeatureFlagPayload = useFeatureFlagPayload;
    exports.useFeatureFlagVariantKey = useFeatureFlagVariantKey;
    exports.usePostHog = usePostHog;

})));
